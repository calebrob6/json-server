This is a RESTful server developed to run AI competitions. It uses HTTP REST to pass and receive JSON data.


OBJECTIVE:
-Generic object oriented stateless server/client implemented using JSON passed over HTTP POSTS


DOCUMENTATION:

See the /doc files for individual game API support


TODO:
-Log file out module for the Game
-OOP'ify the ConnectionHandler more
-Benchmark the HTTP Server under high volumes of requests
-Test the API on a bunch of weird cases
-Write a fully functional JAVA client
-Implement RoundRobin support for the GameManager
-Look into redo'ing GameExecutor
-Fit the getStatus() command into the generic doCommand() API structure


CLASS INFORMATION:

ServerBootstrap contains the main() for the server part. It is responsible for setting up the HTTP Server and creating the context listener 
as well as initiating the game.

ConnectionHandler gets passed all the HTTP requests and handles them in a logical manner (can pass them to the game).

GameExecutor was implemented as a future development front that could regulate request handling and/or store statistics.

Game and Player are both related to whatever game is implemented on top of this framework.

GameManager is a class that manages an arbitrary amount of games, any new connections get fed to GameManager to get placed into a game



The JSON in Java [package org.json] package by Douglas Crockford (douglas@crockford.com) is being used currently (with the restriction "The software shall be used for good, 
not evil.")


JSON API Structure:

{ID:<gameID>,COMMAND:[<commandName>,<arg1>,<arg2>,etc...]}